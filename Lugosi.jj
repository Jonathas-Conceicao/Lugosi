PARSER_BEGIN(Lugosi)
import java.io.*;
import java.util.ArrayList;

public class Lugosi {
	public static void main(String args[]) throws Exception{
		FileInputStream fs = new FileInputStream(new File(args[0]));
		Lugosi parser = new Lugosi(fs);
		LugosiTree tree = parser.Lugosi();
		pprint(tree);
		geraCodigo(tree);
	}
	public static void pprint(LugosiTree prog){/* TODO: @Bretana pprint */}
	public static void geraCodigo(LugosiTree prog){/* TODO: @Bretana CÃ³digo em outra linguagem */}
}

class LugosiTree {
	Main main;
	ArrayList<Func> funcs;

	LugosiTree (Main m, ArrayList<Func> f){
		this.main = m;
		this.funcs = f;
	}
}

class Main {
	ArrayList<VarDecl> decls;
	ArrayList<Command> commands;

	Main (ArrayList<VarDecl> d, ArrayList<Command> c) {
		this.decls = d;
		this.commands = c;
	}
}

class VarDecl {
	String id;
	Type type;

	VarDecl (String i, Type t) {
		this.id = i;
		this.type = t;
	}
}

class Func {
	Type type;
	String name;
	ArrayList<Arg> args;
	ArrayList<VarDecl> decls;
	ArrayList<Command> commands;

	Func (Type t, String n,
				ArrayList<Arg> a,
				ArrayList<VarDecl> d,
				ArrayList<Command> c) {
		this.type = t;
		this.name = n;
		this.args = a;
		this.decls = d;
		this.commands = c;
	}
}

class Arg {
	Type type;
	String name;

	Arg (Type t, String n) {
		this.type = t;
		this.name = n;
	}
}

class Command {

	Command () {
	}
}

class Type {}
class Int extends Type {}
class Bool extends Type {}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <APAR: "(">
| <FPAR: ")">
| <ACHV: "{">
| <FCHV: "}">
| <ATRIB: ":=">
| <FL: ";">
| <IF: "if">
| <WHILE: "while">
| <DO: "do">
| <RETURN: "return">
| <PRINT: "print">
| <INT: "int">
| <BOOL: "bool">
| <FUNC: "function">
| <CONSTB:   "true"|"false">
| <COMMA: ",">
| <UNDER: "_">
| <VAR: "var">
}

TOKEN :
{
  <plus: "+">
| <minus: "-">
| <e: "E">
| <OPaux: ("*" | "/" | "&&" | "||" | "<" | ">" | "==")>
}

TOKEN :
{
  <letra: ["a"-"z","A"-"Z"]>
| <digito: ["0"-"9"]>
}

void Op (): {}
{
  <OPaux> | <minus> | <plus>
}

void Digits (): {}
{ 
  (<digito>)+
}

void FracaoOpt (): {}
{
  (<COMMA> Digits())?
}

void ExpOpt (): {}
{
  (<e>(<plus> | <minus>)? Digits())?
}

void AlphaNumeric (): {}
{
  <letra>|<digito>
}

void EndUnderscore (): {}
{
  <UNDER>(AlphaNumeric())+
}

String Id (): { // TODO: Write to ID
	String id = new String();
	String auxString;
	char auxChar;
} {
	<letra>(AlphaNumeric())*(EndUnderscore())*
		{return id;}
}

void Literal (): {}
{
	Digits() FracaoOpt() ExpOpt()
}

Type Type (): {
	Type type = null;
} {
	(<INT>{type = new Int();}|<BOOL>{type = new Bool();})*
		{return type;}
}

LugosiTree Lugosi (): {
	Main main=null;
	ArrayList<Func> flist = new ArrayList<Func>();
  Func auxFunc = null;
} {
	main = Main() (auxFunc = Func() {flist.add(auxFunc);})* <EOF>
		{return new LugosiTree(main, flist);}
}

Main Main (): {
	ArrayList<VarDecl> decls = new ArrayList<VarDecl>();
	ArrayList<Command> commands = new ArrayList<Command>();
	VarDecl auxVarDecl = null;
	Command auxCommand = null;
} {
	<MAIN> <ACHV> 
		(auxVarDecl = VarDecl() {decls.add(auxVarDecl);})*
		(auxCommand = Command() {commands.add(auxCommand);})*
	<FCHV>
		{return new Main(decls, commands);}
}

Func Func (): {
	Type type = null;
	String name = null;
	ArrayList<Arg> args = null; // ListArg returns a ArrayList
	ArrayList<VarDecl> decls = new ArrayList<VarDecl>();
	ArrayList<Command> commands = new ArrayList<Command>();
	Arg auxArg = null;
	VarDecl auxVarDecl = null;
	Command auxCommand = null;
} {
	<FUNC> type = Type() name = Id() <APAR> args = ListArg() <FPAR> <ACHV>
		(auxVarDecl = VarDecl() {decls.add(auxVarDecl);})*
		(auxCommand = Command() {commands.add(auxCommand);})*
	<FCHV>
		{return new Func(type, name, args, decls, commands);}
}

VarDecl VarDecl (): {
	String id = null;
	Type type = null;
} {
	<VAR> type = Type() id = Id() <FL>
		{return new VarDecl(id, type);}
}

ArrayList<Arg> ListArg (): {
	ArrayList<Arg> args = new ArrayList<Arg>();
	Arg auxArg = null;
} {
	auxArg = Arg() {args.add(auxArg);} (<COMMA> auxArg = Arg() {args.add(auxArg);})*
		{return args;}
}

Arg Arg (): {
	Type type = null;
	String name = null;
} {
	type = Type() name = Id()
		{return new Arg(type, name);}
}

Command Command (): {} // TODO: Implement Command class
{ (Id() ( <ATRIB> Exp() <FL> | <APAR> ListaExp() <FPAR> <FL>)
	 | <IF> <APAR> Exp() <FPAR> BlocoComando() <FL>
	 | <WHILE> <APAR> Exp() <FPAR> <DO> BlocoComando() <FL>
	 | <DO> BlocoComando() <WHILE> <APAR> Exp() <FPAR> <FL>
	 | <RETURN> Exp() <FL>
	 | <PRINT> <APAR> Exp() <FPAR> <FL>)
		{return new Command();} // TODO: Implement Command class
}

void ListaExp (): {} 
{
  Exp() (<COMMA> Exp())*
}

void Exp(): {} 
{
  <APAR> Exp() Op() Exp() <FPAR> | Fator()
}

void Fator(): {} 
{
  Id() (<APAR> ListaExp() <FPAR>)? | Literal() | <CONSTB>
}

void BlocoComando (): {} { <ACHV> (Command())* <FCHV> }
