PARSER_BEGIN(Lugosi)
import java.io.*;
import java.util.ArrayList;

/* Language's sintatic class */

public class Lugosi {
	public static void main(String args[]) throws Exception{
		FileInputStream fs = new FileInputStream(new File(args[0]));
		Lugosi parser = new Lugosi(fs);
		LugosiTree tree = parser.Lugosi();
		pprint(tree);
		geraCodigo(tree);
	}
	public static void pprint(LugosiTree prog){/*??????*/}
	public static void geraCodigo(LugosiTree prog){/*??????*/}
}

class LugosiTree {
	Main main;
	ArrayList <Func> funcs;
}

class Main {
	ArrayList <VarDecl> decls;
	ArrayList <Commands> commands;
}

class VarDecl {
	String id;
	Type tipo;
}

class Func {
}

class Commands {
}

class Type {}
class Int extends Type {}
class Bool extends Type {}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <APAR: "(">
| <FPAR: ")">
| <ACHV: "{">
| <FCHV: "}">
| <ATRIB: ":=">
| <FL: ";">
| <IF: "if">
| <WHILE: "while">
| <DO: "do">
| <RETURN: "return">
| <PRINT: "print">
| <INT: "int">
| <BOOL: "bool">
| <FUNC: "function">
| <CONSTB:   "true"|"false">
| <COMMA: ",">
| <UNDER: "_">
| <VAR: "var">
}

TOKEN :
{
  <plus: "+">
| <minus: "-">
| <e: "E">
| <OPaux: ("*" | "/" | "&&" | "||" | "<" | ">" | "==")>
//  | <ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*>
}

TOKEN :
{
  <letra: ["a"-"z","A"-"Z"]>
| <digito: ["0"-"9"]>
}

void Op (): {}
{
  <OPaux> | <minus> | <plus>
}

void Digits (): {}
{ 
  (<digito>)+
}

void FracaoOpt (): {}
{
  (<COMMA> Digits())?
}

void ExpOpt (): {}
{
  (<e>(<plus> | <minus>)? Digits())?
}

void AlphaNumeric (): {}
{
  <letra>|<digito>
}

void EndUnderscore (): {}
{
  <UNDER>(AlphaNumeric())+
}

void Id (): {}
{
  (<letra>)(AlphaNumeric())*(EndUnderscore())*
}

void Literal (): {}
{
    Digits() FracaoOpt() ExpOpt()
}

void Type (): {}
{
  ( <INT>|<BOOL>)*
}

void ListaExp (): {} 
{
  Exp() ListaExpAux() //| ListaExp() <COMMA> Exp()
} // With a single ID for test propouses

void ListaExpAux (): {}
{
  LOOKAHEAD(2) <COMMA> Exp() ListaExpAux() | Empty()
}

void Exp(): {} 
{
  <APAR> Exp() Op() Exp() <FPAR> |  Fator()
}

void Fator(): {} 
{
  LOOKAHEAD(2) Id() | Id() <APAR> (ListaExp())? <FPAR> | Literal() | <CONSTB>
}

void Empty (): {}
{
  ""|<EOF>
}

LugosiTree Lugosi (): {}
{
	Main() (Func())* <EOF>
		{return new LugosiTree();}
}

void Main (): {}
{
	<MAIN> <ACHV> 
		SecVarDecl()
		SecCommand()
	<FCHV>
}

void Func (): {}
{
	<FUNC> Type() Id() <APAR> ListArg() <FPAR> <ACHV>
		SecVarDecl()
		SecCommand()
	<FCHV>
}

void SecVarDecl (): {}
{
	(<VAR> Type() Id() <FL>)*
}

void ListArg (): {} { Type() Id() (<COMMA> Type() Id())* }

void SecCommand (): {}
{ (LOOKAHEAD(2)
	 Id() <ATRIB> Exp() <FL>
	 | Id() <APAR> (ListaExp())? <FPAR> <FL>
	 | <IF> <APAR> Exp() <FPAR> BlocoComando() <FL>
	 | <WHILE> <APAR> Exp() <FPAR> <DO> BlocoComando() <FL>
	 | <DO> BlocoComando() <WHILE> <APAR> Exp() <FPAR> <FL>
	 | <RETURN> Exp() <FL>
	 | <PRINT> <APAR> Exp() <FPAR> <FL>)*
}

void BlocoComando (): {} { <ACHV> SecCommand() <FCHV> }
