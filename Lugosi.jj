PARSER_BEGIN(Lugosi)
import java.io.*;
import java.util.ArrayList;

public class Lugosi {
	public static void main(String args[]) throws Exception{
		if (args.length < 1) {
			System.err.println("Invalid file");
			System.exit(1);
		}
		FileInputStream fs = new FileInputStream(new File(args[0]));
		Lugosi parser = new Lugosi(fs);
		LugosiTree tree = parser.Lugosi();
		pprint(tree);
		geraCodigo(tree);
	}

	

	public static void pprint(LugosiTree prog){
		/* TODO: @Bretana pprint */
		
		System.out.println(prog.main);
		for (Func i : prog.funcs) 
			System.out.println(i);
	}

	public static void geraCodigo(LugosiTree prog){
		/* TODO: @Bretana CÃ³digo em outra linguagem */
	}
}

class LugosiTree {
	Main main;
	ArrayList<Func> funcs;

	LugosiTree (Main m, ArrayList<Func> f){
		this.main = m;
		this.funcs = f;
	}
	
	@Override
	public String toString() {
		String res = "\n";
		res += main.toString() + "\n";
		for (Func f : this.funcs)
			res += f.toString() + "\n";

		return res;
	}
	

}

class Main {
	ArrayList<VarDecl> decls;
	ArrayList<Command> commands;

	Main (ArrayList<VarDecl> d, ArrayList<Command> c) {
		this.decls = d;
		this.commands = c;
	}

	@Override
	public String toString() {
		String res = "main {\n";

		for (VarDecl v : this.decls)
			res += "\t" + v.toString() + "\n";
		res += "\n";

		for (Command c : this.commands)
			res += "\t" + c.toString();

		return res + "\n}";
	}
}

class VarDecl {
	String id;
	Type type;

	VarDecl (String i, Type t) {
		this.id = i;
		this.type = t;
	}
	@Override
	public String toString() {
		return "var " + type.toString() + " " + id.toString() + ";";
	}
}

class Func {
	Type type;
	String name;
	ArrayList<Arg> args;
	ArrayList<VarDecl> decls;
	ArrayList<Command> commands;

	Func (Type t, String n,
				ArrayList<Arg> a,
				ArrayList<VarDecl> d,
				ArrayList<Command> c) {
		this.type = t;
		this.name = n;
		this.args = a;
		this.decls = d;
		this.commands = c;
	}

	@Override
	public String toString() {
		String res = "function " + this.type.toString() + " " + this.name + " (";
		
		for (Arg a : this.args)
			res += a.toString() + ", ";
		// replace last ',' with the ')'
		res = res.substring(0, res.length() -3);
		res += ")";;
		
		res += "{\n";
		
		for (VarDecl v : this.decls)
			res += "\t" + v.toString() + "\n";
		res += "\n";

		for (Command c : this.commands)
			res += "\t" + c.toString() + "\n";
		
		return res + "}";
	}
}

class Arg {
	Type type;
	String name;

	Arg (Type t, String n) {
		this.type = t;
		this.name = n;
	}

	@Override
	public String toString() {
		return type.toString() + " " + name;
	}
}

interface Command {}
interface Type {}
interface Exp {}
interface Fator extends Exp {}

class Int implements Type {

	@Override
	public String toString() {
		return "int";
	}
}
class Bool implements Type {

	@Override
	public String toString() {
		return "bool";
	}
}

class Attribution implements Command {
	String id;
	Exp exp;

	Attribution (String i, Exp e) {
		this.id = i;
		this.exp = e;
	}

	@Override
	public String toString() {
		return id + " = " + exp.toString();
	}
}

class FCall implements Command, Fator{
	String id;
	ArrayList<Exp> exps;
	FCall (String i, ArrayList<Exp> e) {this.id = i;this.exps=e;}

	@Override
	public String toString() {
		String res = id + "(";

		if (this.exps != null) {
			for (Exp e : this.exps) {
				if (e != null) {
					res += e.toString() + ", ";
				}
			}
		}

		return res + ");";
	}
}

class If implements Command {
	Exp bexp;
	ArrayList<Command> cmds;
	If (Exp b, ArrayList<Command> c) {this.bexp = b;this.cmds = c;}

	@Override
	public String toString() {
		String res = "if (" + bexp.toString();
		
		for (Command c : cmds)
			res += c;
		return res;
	}
}

class While implements Command {
	Exp bexp;
	ArrayList<Command> cmds;
	While (Exp b, ArrayList<Command> c) {this.bexp = b;this.cmds = c;}

	@Override
	public String toString() {
		String res = "while (" + bexp.toString();

		for (Command c : cmds)
			res += c.toString();

		return res;
	}
}

class Do implements Command {
	Exp bexp;
	ArrayList<Command> cmds;
	Do (Exp b, ArrayList<Command> c) {this.bexp = b;this.cmds = c;}

	@Override
	public String toString() {
		return "do{\n\tTODO: while\n}";
	}
}

class Return implements Command {
	Exp exp;
	Return (Exp b) {this.exp = b;}

	@Override
	public String toString() {
		return "return " + exp;
	}
}

class Print implements Command {
	Exp exp;
	Print (Exp b) {this.exp = b;}

	@Override
	public String toString() {
		return "print (" + exp + ");";
	}
}

class OExp implements Exp {
	Exp a, b;
	String op;
	OExp (Exp a, String op, Exp b) {
		this.a = a;
		this.op = op;
		this.b = b;
	}

	@Override
	public String toString() {
		return "\nTODO: OExp";
	}
}

class Id implements Fator{
	String id;
	Id (String i) {this.id = i;}

	@Override
	public String toString(){
		return id;
	}
}
class Literal implements Fator{
	int value; // TODO: (Maybe @Bretana) Implementar retorno de valores reais
	Literal (int v) {this.value = v;}

	@Override
	public String toString(){
		return value + "";
	}
}
class True implements Fator{}
class False implements Fator{}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <APAR: "(">
| <FPAR: ")">
| <ACHV: "{">
| <FCHV: "}">
| <ATRIB: ":=">
| <FL: ";">
| <IF: "if">
| <WHILE: "while">
| <DO: "do">
| <RETURN: "return">
| <PRINT: "print">
| <INT: "int">
| <BOOL: "bool">
| <FUNC: "function">
| <CONSTB:   "true"|"false">
| <COMMA: ",">
| <UNDER: "_">
| <VAR: "var">
}

TOKEN :
{
  <plus: "+">
| <minus: "-">
| <e: "E">
| <OPaux: ("*" | "/" | "&&" | "||" | "<" | ">" | "==")>
}

TOKEN :
{
  <letra: ["a"-"z","A"-"Z"]>
| <digito: ["0"-"9"]>
}

String Op (): {Token t;}
{
	t = <OPaux>   {return t.image;}
	| t = <minus> {return t.image;}
	| t = <plus> {return t.image;}
}

int Digits (): {
	String sDig = "";
	Token t;
} { 
	(t =<digito> {sDig += t.image;})+
		{return Integer.parseInt(sDig);}
}

void FracaoOpt (): {}
{
  (<COMMA> Digits())?
}

void ExpOpt (): {}
{
  (<e>(<plus> | <minus>)? Digits())?
}

String AlphaNumeric (): {
	Token token;
} {
	token = <letra> {return token.image;}
	| token = <digito> {return token.image;}
}

String EndUnderscore (): {
	String id = new String();
	String auxString;
	Token token;
} {
	token = <UNDER> {id += token.image;}
	(auxString = AlphaNumeric() {id += auxString;})+
		{return id;}
}

String Id (): {
	String id = new String();
	String auxString;
	Token token;
} {
	token = <letra> {id += token.image;}
	(auxString = AlphaNumeric()  {id += auxString;})*
	(auxString = EndUnderscore() {id += auxString;})*
		{return id;}
}

Literal Literal (): { // TODO: (Maybe @Bretana) Implementar retorno de valores reais
	int digits;
} {
	digits = Digits() FracaoOpt() ExpOpt()
		{return new Literal(digits);}
}

Type Type (): {
	Type type = null;
} {
	(<INT>{type = new Int();}|<BOOL>{type = new Bool();})*
		{return type;}
}

LugosiTree Lugosi (): {
	Main main=null;
	ArrayList<Func> flist = new ArrayList<Func>();
	Func auxFunc = null;
} {
	main = Main() (auxFunc = Func() {flist.add(auxFunc);})* <EOF>
		{return new LugosiTree(main, flist);}
}

Main Main (): {
	ArrayList<VarDecl> decls = new ArrayList<VarDecl>();
	ArrayList<Command> commands = new ArrayList<Command>();
	VarDecl auxVarDecl = null;
	Command auxCommand = null;
} {
	<MAIN> <ACHV> 
		(auxVarDecl = VarDecl() {decls.add(auxVarDecl);})*
		(auxCommand = Command() {commands.add(auxCommand);})*
	<FCHV>
		{return new Main(decls, commands);}
}

Func Func (): {
	Type type = null;
	String name = null;
	ArrayList<Arg> args = null; // ListArg returns a ArrayList
	ArrayList<VarDecl> decls = new ArrayList<VarDecl>();
	ArrayList<Command> commands = new ArrayList<Command>();
	Arg auxArg = null;
	VarDecl auxVarDecl = null;
	Command auxCommand = null;
} {
	<FUNC> type = Type() name = Id() <APAR> args = ListArg() <FPAR> <ACHV>
		(auxVarDecl = VarDecl() {decls.add(auxVarDecl);})*
		(auxCommand = Command() {commands.add(auxCommand);})*
	<FCHV>
		{return new Func(type, name, args, decls, commands);}
}

VarDecl VarDecl (): {
	String id = null;
	Type type = null;
} {
	<VAR> type = Type() id = Id() <FL>
		{return new VarDecl(id, type);}
}

ArrayList<Arg> ListArg (): {
	ArrayList<Arg> args = new ArrayList<Arg>();
	Arg auxArg = null;
} {
	auxArg = Arg() {args.add(auxArg);} (<COMMA> auxArg = Arg() {args.add(auxArg);})*
		{return args;}
}

Arg Arg (): {
	Type type;
	String name;
} {
	type = Type() name = Id()
		{return new Arg(type, name);}
}

Command Command (): {
	Command cmd;
	Exp exp;
	ArrayList<Command> cmds;
} {
	cmd = AttribOrFCall() {return cmd;}
	| <IF> <APAR> exp = Exp() <FPAR> cmds = BlocoComando() <FL> {return new If(exp, cmds);}
	| <WHILE> <APAR> exp = Exp() <FPAR> <DO> cmds = BlocoComando() <FL> {return new While(exp, cmds);}
	| <DO> cmds = BlocoComando() <WHILE> <APAR> exp = Exp() <FPAR> <FL> {return new Do(exp, cmds);}
	| <RETURN> exp = Exp() <FL> {return new Return(exp);}
	| <PRINT> <APAR> exp = Exp() <FPAR> <FL> {return new Print(exp);}
}

Command AttribOrFCall (): {
	String id;
	ArrayList<Exp> exps;
  Exp auxExp;
} {
	id = Id()
		( <ATRIB> auxExp = Exp() <FL> {return new Attribution(id, auxExp);}
		| <APAR> exps = ListaExp() {return new FCall(id, exps);} <FPAR> <FL>)
}

ArrayList<Exp> ListaExp (): {
	ArrayList<Exp> exps = new ArrayList<Exp>();
	Exp auxExp;
} {
	auxExp = Exp() {exps.add(auxExp);}
	(<COMMA> auxExp = Exp() {exps.add(auxExp);})*
		{return exps;}
}

Exp Exp(): {
	Exp a, b;
	String op;
	Fator f;
} {
  <APAR> a = Exp() op = Op() b = Exp() <FPAR> {return new OExp(a, op, b);}
	| f = Fator() {return f;}
}

Fator Fator(): {
	String id;
	ArrayList<Exp> exps = null;
	Literal l;
	Token t;
} {
  id = Id() (<APAR> exps = ListaExp() <FPAR>)? {return new FCall(id, exps);}
	| l = Literal() {return l;}
	| t = <CONSTB> {return t.image.equals("true") ? new True() : new False();}
}

ArrayList<Command> BlocoComando (): {
	ArrayList<Command> cmds = new ArrayList<Command>();
	Command auxCmd;
} {
	<ACHV> (auxCmd = Command() {cmds.add(auxCmd);})* <FCHV> {return cmds;}
}
